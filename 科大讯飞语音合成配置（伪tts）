此配置方法一切建立在64位系统上，如若32位系统需要自己生成tts_offline_sample
注：相较之前的读取wav文件，本版将实现wav代码添加在工程中，在语音播报文字较少的情况下，基本无延迟。
但文字播报较多，延迟较为明显。因为无需在事先准备语音包，故可近似于实现类似espeak的tts播报，故为伪tts，但语音效果相较espeak。


play命令包安装

    sudo apt-get install sox
    sudo apt-get install sox libsox-fmt-all
    
1.1 下载配置包(内有两个文件：tts_offline_sample libmsc.so)放在七人群里

1.2 将解压后的文件移入linux（虚拟机或者树莓派）  home/用户名/    主目录下 注：此处用户名都是指自己登陆的用户名，多数是英文

   libmsc.so放置
   sudo cp ./libmsc.so /usr/lib 
   cd /usr/lib 
   sudo chmod 777 ./libmsc.so
   
   tts_offline_sample放置
   由于opencpn一旦被lock在菜单栏上，或者复制到desktop上，opencpn的所在目录都是不同的，所以最好将tts_offline_sample
   复制粘贴在三个位置。
   1.工程源代码build下 2.home/用户名/ 因为在此之前已经将此文件放置于此目录下，可跳过 3. home/用户名/Desktop或者是home/用户名/桌面


 
 
 32位系统（64位系统也可以自己生成tts_offline_sample）
 
 play命令包安装

    sudo apt-get install sox
    sudo apt-get install sox libsox-fmt-all 
 
 1.七人群内下载配置包
 
 2.生成tts_offline_sample
 进入到Linux_aisound_exp1227_5f229e9d/libs/x86下（x86对应32位系统，x64对应64位系统），将libmsc.so复制到/usr/lib下，并给读写权限
 终端命令
   sudo cp ./libmsc.so /usr/lib 
   cd /usr/lib 
   sudo chmod 777 ./libmsc.so
  
  进入到Linux_aisound_exp1227_5f229e9d/samples/tts_offline_sample下运行32bit_make.sh(64位则64bit_make.sh)
  终端命令
    source 32bit_make.sh
  
 如果未报错，tts_offline_sample在Linux_aisound_exp1227_5f229e9d/bin下。
 验证生成的tts_offline_sample是否可用
 进入到Linux_aisound_exp1227_5f229e9d/bin 目录下
 终端命令
 ./tts_offline_sample "kk.wav" "你好。"
 查看该目录下是否生成kk.wav ,双击点开是否有 “你好”的声音，有则成功。
 
 
 3.将tts_offline_sample复制到三个目录下，原因同上
 1.工程源代码build下 2.home/用户名/  3. home/用户名/Desktop或者是home/用户名/桌面
 
 4.play命令包安装

    sudo apt-get install sox
    sudo apt-get install sox libsox-fmt-all 
